<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:SteadyState.Grapher"
    xmlns:elements="clr-namespace:SteadyState.Grapher.Elements"
    xmlns:controls="clr-namespace:SteadyState.Grapher.Controls"
    xmlns:sw="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:helpers="clr-namespace:SteadyState.Grapher.Helpers"
    xmlns:converters="clr-namespace:SteadyState.Grapher.Helpers.Converters">

	<DrawingBrush x:Key="HatchGroundBrush"
				  TileMode="Tile"
				  ViewportUnits="Absolute"
				  Viewport="0.5,0,5,6">
		<DrawingBrush.Drawing>
			<DrawingGroup>
				<GeometryDrawing Brush="YellowGreen">
					<GeometryDrawing.Geometry>
						<RectangleGeometry Rect="-60,-60,120,120" />
					</GeometryDrawing.Geometry>
				</GeometryDrawing>
				<GeometryDrawing Brush="Yellow"
				                 Geometry="M60,-60 L0,60 L-60,60 L0,-60Z"/>
			</DrawingGroup>
		</DrawingBrush.Drawing>
	</DrawingBrush>

	<DrawingBrush x:Key="GridBasicBrush"
	              Viewport="0.25,0.85,2,2" 
	              ViewportUnits="Absolute"
	              TileMode="Tile">
		<DrawingBrush.Drawing>
			<DrawingGroup>
				<GeometryDrawing Brush="White">
					<GeometryDrawing.Geometry>
						<RectangleGeometry Rect="0,0,1.5,1.5" />
					</GeometryDrawing.Geometry>
				</GeometryDrawing>
				<GeometryDrawing Geometry="M0,0 L1,1 1.1,1, 0.1,0Z" Brush="Black" />
				<GeometryDrawing Geometry="M0,1 L1,0 1.1,0, 0.1,1Z" Brush="Black" />
			</DrawingGroup>
		</DrawingBrush.Drawing>
	</DrawingBrush>

	<converters:MultiplyConverter x:Key="MultiplyConverter"/>
	<converters:Object2VisibilityConverter x:Key="Object2VisibilityConverter"/>



	<Style TargetType="{x:Type elements:Vertex}">
		<Setter Property="UseLayoutRounding" Value="False"/>
		<Setter Property="RenderTransform">
			<Setter.Value>
				<RotateTransform Angle="{Binding Angle, RelativeSource={RelativeSource AncestorType=elements:Vertex}}"
                                 CenterY="5"
                                 CenterX="5"/>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type elements:Vertex}">
					<Grid>
						<Canvas RenderTransformOrigin="0.5,0.5" Width="5" Height="5">
							<Canvas.RenderTransform>
								<TransformGroup>
									<TranslateTransform X="0" Y="0"/>
									<RotateTransform Angle="{Binding RelativeSource={RelativeSource AncestorType=elements:Vertex}, Path=Angle, Converter={StaticResource MultiplyConverter}, ConverterParameter=-1}"/>
								</TransformGroup>
							</Canvas.RenderTransform>
							<Border BorderBrush="Black" BorderThickness="0" HorizontalAlignment="Center" VerticalAlignment="Center" Canvas.Left="7.5" Canvas.Top="5"
							        x:Name="ElementLabel">
								<StackPanel >
									<TextBlock Text="{Binding RelativeSource={RelativeSource AncestorType=elements:Vertex}, Path=Title}" FontSize="3"
									           Visibility="{Binding RelativeSource={RelativeSource AncestorType=elements:Vertex}, Path=Title, Converter={StaticResource Object2VisibilityConverter}}"/>
									<TextBlock Text="{Binding RelativeSource={RelativeSource AncestorType=elements:Vertex}, Path=VoltNom, StringFormat= 'Uном={0:0.##}'}" FontSize="3"
									           Visibility="{Binding RelativeSource={RelativeSource AncestorType=elements:Vertex}, Path=VoltNom, Converter={StaticResource Object2VisibilityConverter}}"/>
									<TextBlock Text="{Binding RelativeSource={RelativeSource AncestorType=elements:Vertex}, Path=PowerRe, StringFormat= 'P={0:0.##}'}" FontSize="3"
									           Visibility="{Binding RelativeSource={RelativeSource AncestorType=elements:Vertex}, Path=PowerRe, Converter={StaticResource Object2VisibilityConverter}}"/>
									<TextBlock Text="{Binding RelativeSource={RelativeSource AncestorType=elements:Vertex}, Path=PowerIm, StringFormat= 'Q={0:0.##}'}" FontSize="3"
									           Visibility="{Binding RelativeSource={RelativeSource AncestorType=elements:Vertex}, Path=PowerIm, Converter={StaticResource Object2VisibilityConverter}}"/>
									<TextBlock Text="{Binding RelativeSource={RelativeSource AncestorType=elements:Vertex}, Path=VoltMagn, StringFormat= 'U={0:0.##}'}" FontSize="3"
									           Visibility="{Binding RelativeSource={RelativeSource AncestorType=elements:Vertex}, Path=VoltMagn, Converter={StaticResource Object2VisibilityConverter}}"/>
								</StackPanel>
							</Border>
						</Canvas>

						<elements:VertexClickGrid x:Name="InteractiveGrid">
							<Rectangle x:Name="InnerRectangle"
							           Stroke="{x:Static Brushes.Black}"
							           StrokeThickness="1"
							           Fill="{x:Static Brushes.Transparent}"
							           Height="6"
							           Margin="-0.5,1.5"
							           Visibility="Collapsed"/>

							<Ellipse x:Name="InnerEllipse"
							         Visibility="Collapsed"
							         Stroke="{x:Static Brushes.Black}"
							         StrokeThickness="1"
							         Fill="{x:Static Brushes.Transparent}"
							         Margin="1"
							         Height="7"
							         Width="7"/>

							<Rectangle x:Name="Rectangle"
							           Stroke="{Binding RelativeSource={RelativeSource AncestorType=elements:Vertex}, Path=Stroke}"
							           StrokeThickness="{TemplateBinding StrokeThickness}"
							           Fill="{TemplateBinding Fill}"
							           Height="5"
							           Margin="0,2.5"/>

							<Ellipse x:Name="Ellipse"
							         Visibility="Collapsed"
							         Stroke="{Binding RelativeSource={RelativeSource AncestorType=elements:Vertex}, Path=Stroke}"
							         StrokeThickness="{TemplateBinding StrokeThickness}"
							         Fill="{TemplateBinding Fill}"
							         Margin="2"
							         Height="6"/>
						</elements:VertexClickGrid>
					</Grid>

					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="ActualWidth" Value="10"/>
								<Condition Property="ActualHeight" Value="10"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="Rectangle" Property="Visibility" Value="Collapsed"/>
							<Setter TargetName="Ellipse" Property="Visibility" Value="Visible"/>
						</MultiTrigger>
						<Trigger Property="elements:Vertex.IsPreview" Value="True">
							<Setter TargetName="Rectangle" Property="StrokeDashArray" Value="5 2"/>
							<Setter TargetName="Ellipse" Property="StrokeDashArray" Value="5 2"/>
						</Trigger>

						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition SourceName="Ellipse" Property="Visibility" Value="Visible"/>
								<Condition Property="IsSelected" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="InnerEllipse" Property="Visibility" Value="Visible"/>
						</MultiTrigger>


						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition SourceName="Rectangle" Property="Visibility" Value="Visible"/>
								<Condition Property="IsSelected" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="InnerRectangle" Property="Visibility" Value="Visible"/>
							<Setter Property="Panel.ZIndex" Value="1"/>
						</MultiTrigger>

						<!--<Trigger Property="elements:Vertex.IsSelected" Value="True">
							<Setter TargetName="InnerRectangle" Property="Visibility" Value="Visible"/>
						</Trigger>-->
						<Trigger Property="elements:Vertex.IsConnected" Value="True">
							<Setter Property="Stroke" Value="{x:Static Brushes.Blue}"/>
						</Trigger>
						<Trigger Property="elements:Vertex.IsGround" Value="True">
							<Setter Property="Fill" Value="{StaticResource HatchGroundBrush}"/>
						</Trigger>
						<Trigger Property="elements:Vertex.IsBasic" Value="True">
							<Setter Property="Fill" Value="{x:Static Brushes.LightSkyBlue}"/>
						</Trigger>

						<Trigger Property="elements:Vertex.IsDraggingLabel" Value="True">
							<Setter TargetName="Rectangle" Property="StrokeDashArray" Value="2 2"/>
							<Setter TargetName="Ellipse" Property="StrokeDashArray" Value="2 2"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type elements:Edge}">
		<Setter Property="UseLayoutRounding" Value="False"/>
		<Setter Property="Panel.ZIndex" Value="2"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type elements:Edge}">

					<Grid>
						<Grid x:Name="InteractiveGrid">
							<Grid.Resources>
								<Style TargetType="CheckBox">
									<Setter Property="Template">
										<Setter.Value>
											<ControlTemplate TargetType="CheckBox">
												<Grid>
													<Line X1="0" X2="3.75"
                                                      Y1="1.5" Y2="1.5"
                                                      x:Name="innerLine"
                                                      Stroke="{TemplateBinding BorderBrush}"
                                                      StrokeThickness="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=StrokeThickness}"/>

													<Grid Margin="3.75,0,0,0">
														<Rectangle Width="3" Height="3" 
                                                               Stroke="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=Stroke}" Fill="{x:Static Brushes.White}"
                                                               StrokeThickness="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=StrokeThickness}"/>
														<Line x:Name="line"
                                                          X1="0.75" X2="2.25"
                                                          Y1="1.5" Y2="1.5"
                                                          RenderTransformOrigin="0.5,0.5"
                                                          Stroke="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=Stroke}"
                                                          StrokeThickness="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=StrokeThickness}"/>

													</Grid>
												</Grid>
												<ControlTemplate.Triggers>
													<Trigger Property="IsChecked" Value="False">
														<Setter Property="RenderTransform" TargetName="line">
															<Setter.Value>
																<RotateTransform Angle="90"/>
															</Setter.Value>
														</Setter>
														<Setter TargetName="line" Property="Stroke" Value="{x:Static Brushes.Gray}"/>
													</Trigger>
												</ControlTemplate.Triggers>
											</ControlTemplate>
										</Setter.Value>
									</Setter>
								</Style>

								<helpers:EdgeMaskMultiConverter x:Key="EdgeMaskMultiConverter"/>

							</Grid.Resources>

							<Polyline x:Name="ClickPolyline"
						          Stroke="{x:Static Brushes.Transparent}"
						          StrokeThickness="2"
						          Points="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=PointCollection}"/>

							<!--Обводка основной линии ветви-->
							<Polyline x:Name="innerPolyline"
								  Visibility="Collapsed"
                                  Stroke="{x:Static Brushes.Black}"
                                  StrokeThickness="1.25"
                                  Points="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=PointCollection}">
								<Polyline.Style>
									<Style TargetType="Polyline">
										<Style.Triggers>
											<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=IsTrasnformer}" Value="True">
												<Setter Property="Clip">
													<Setter.Value>
														<GeometryGroup>
															<RectangleGeometry Rect="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=Rect}"/>
															<CombinedGeometry GeometryCombineMode="Union">
																<CombinedGeometry.Geometry1>
																	<EllipseGeometry Center="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=TransformerFirstElementPoint}" RadiusX="3" RadiusY="3"/>
																</CombinedGeometry.Geometry1>
																<CombinedGeometry.Geometry2>
																	<EllipseGeometry Center="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=TransformerSecondElementPoint}" RadiusX="3" RadiusY="3"/>
																</CombinedGeometry.Geometry2>
															</CombinedGeometry>
														</GeometryGroup>
													</Setter.Value>
												</Setter>
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</Polyline.Style>
							</Polyline>


							<!--Обводка трансформатора-->
							<Path x:Name="InnerTransformer" Visibility="Hidden"
							      Stroke="{x:Static Brushes.Black}"
							      StrokeThickness="1.25"
							      Fill="{x:Static Brushes.Transparent}">

								<Path.Data>
									<GeometryGroup FillRule="Nonzero">
										<EllipseGeometry Center="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=TransformerFirstElementPoint}" RadiusX="3" RadiusY="3"/>
										<EllipseGeometry Center="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=TransformerSecondElementPoint}" RadiusX="3" RadiusY="3"/>
									</GeometryGroup>
								</Path.Data>
							</Path>

							<!--Основная линия ветви-->
							<Polyline x:Name="Polyline"
						          Stroke="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=Stroke}"
						          Points="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=PointCollection}"
						          StrokeThickness="{TemplateBinding StrokeThickness}">
								<Polyline.Style>
									<Style TargetType="Polyline">
										<Style.Triggers>
											<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=IsTrasnformer}" Value="True">
												<Setter Property="Clip">
													<Setter.Value>
														<GeometryGroup>
															<RectangleGeometry Rect="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=Rect}"/>
															<CombinedGeometry GeometryCombineMode="Union">
																<CombinedGeometry.Geometry1>
																	<EllipseGeometry Center="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=TransformerFirstElementPoint}" RadiusX="3" RadiusY="3"/>
																</CombinedGeometry.Geometry1>
																<CombinedGeometry.Geometry2>
																	<EllipseGeometry Center="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=TransformerSecondElementPoint}" RadiusX="3" RadiusY="3"/>
																</CombinedGeometry.Geometry2>
															</CombinedGeometry>
														</GeometryGroup>
													</Setter.Value>
												</Setter>
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</Polyline.Style>
							</Polyline>

							<!--Трансформатор-->
							<Path x:Name="Transformer" Visibility="Hidden"
						      Stroke="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=Stroke}"
						      StrokeThickness="{TemplateBinding StrokeThickness}"
						      Fill="{x:Static Brushes.Transparent}">

								<Path.Data>
									<GeometryGroup FillRule="Nonzero">
										<EllipseGeometry Center="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=TransformerFirstElementPoint}" RadiusX="3" RadiusY="3"/>
										<EllipseGeometry Center="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=TransformerSecondElementPoint}" RadiusX="3" RadiusY="3"/>
									</GeometryGroup>
								</Path.Data>
							</Path>

							<Canvas>
								<!--Выключатель в начале ветви-->
								<CheckBox x:Name="Q1"
								          IsChecked="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=On1}"
								          BorderBrush="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=OldV1.Stroke}"
								          Canvas.Left="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=StartPoint.X}"
								          Canvas.Top="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=StartPoint.Y}">
									<CheckBox.RenderTransform>
										<TransformGroup>
											<TranslateTransform Y="-1.5"/>
											<RotateTransform Angle="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=StartVectorAngle}"/>
										</TransformGroup>
									</CheckBox.RenderTransform>
								</CheckBox>

								<!--Выключатель в конце ветви-->
								<CheckBox x:Name="Q2"
								          IsChecked="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=On2}"
								          BorderBrush="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=OldV2.Stroke}"
								          Canvas.Left="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=EndPoint.X}"
								          Canvas.Top="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=EndPoint.Y}">
									<CheckBox.RenderTransform>
										<TransformGroup>
											<TranslateTransform Y="-1.5"/>
											<RotateTransform Angle="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=EndVectorAngle}"/>
										</TransformGroup>
									</CheckBox.RenderTransform>
								</CheckBox>

								<Path Stroke="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=Stroke}" Data="M -1 1 L 1.5 0 L -1 -1"
								      StrokeThickness="0.5"
								      Canvas.Left="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=PowerStartPoint.X}"
								      Canvas.Top="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=PowerStartPoint.Y}"
								      RenderTransformOrigin="0, 0">
									<Path.RenderTransform>
										<RotateTransform Angle="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=MaxVectorAngle}"/>
									</Path.RenderTransform>
								</Path>
							</Canvas>

							<!--Начальная точка-->
							<Path x:Name="DotV1"
							      StrokeThickness="{TemplateBinding StrokeThickness}"
							      Stroke="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=OldV1.Stroke}"
							      Fill="{x:Static Brushes.LightGray}">
								<Path.Data>
									<EllipseGeometry Center="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=StartPoint}" RadiusX="1" RadiusY="1"/>
								</Path.Data>
							</Path>
							<!--Конечная точка-->
							<Path x:Name="DotV2"
							      StrokeThickness="{TemplateBinding StrokeThickness}"
							      Stroke="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=OldV2.Stroke}"
							      Fill="{x:Static Brushes.LightGray}">
								<Path.Data>
									<EllipseGeometry Center="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=EndPoint}" RadiusX="1" RadiusY="1"/>
								</Path.Data>
							</Path>
						</Grid>

						<Canvas>
							<Border BorderBrush="Black" BorderThickness="0" HorizontalAlignment="Center" VerticalAlignment="Center"
							        Padding="1.5"
							        Canvas.Left="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=PowerStartPoint.X}"
							        Canvas.Top="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=PowerStartPoint.Y}"
							        x:Name="ElementLabel">
								<StackPanel >
									<TextBlock Text="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=R, StringFormat= 'R={0:0.##}'}" FontSize="3"
									           Visibility="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=R, Converter={StaticResource Object2VisibilityConverter}}"/>
									<TextBlock Text="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=X, StringFormat= 'X={0:0.##}'}" FontSize="3"
									           Visibility="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=X, Converter={StaticResource Object2VisibilityConverter}}"/>
									<TextBlock Text="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=PwrStRe, StringFormat= 'P={0:0.##}'}" FontSize="3"
									           Visibility="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=PwrStRe, Converter={StaticResource Object2VisibilityConverter}}"/>
									<TextBlock Text="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=PwrStIm, StringFormat= 'Q={0:0.##}'}" FontSize="3"
									           Visibility="{Binding RelativeSource={RelativeSource AncestorType=elements:Edge}, Path=PwrStIm, Converter={StaticResource Object2VisibilityConverter}}"/>
								</StackPanel>
							</Border>
						</Canvas>
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="elements:Edge.IsPreview" Value="True">
							<Setter TargetName="Polyline" Property="StrokeDashArray" Value="5 2"/>
							<Setter TargetName="Q1" Property="Visibility" Value="Hidden"/>
							<Setter TargetName="Q2" Property="Visibility" Value="Hidden"/>
							<Setter TargetName="DotV1" Property="Visibility" Value="Hidden"/>
							<Setter TargetName="DotV2" Property="Visibility" Value="Hidden"/>
							<Setter Property="Panel.ZIndex" Value="-1"/>
						</Trigger>

						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsTrasnformer" Value="False"/>
								<Condition Property="IsSelected" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="innerPolyline" Property="Visibility" Value="Visible"/>
						</MultiTrigger>


						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsTrasnformer" Value="True"/>
								<Condition Property="IsSelected" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="innerPolyline" Property="Visibility" Value="Visible"/>
							<Setter TargetName="InnerTransformer" Property="Visibility" Value="Visible"/>
						</MultiTrigger>

						<Trigger Property="elements:Edge.IsConnected" Value="True">
							<Setter Property="Stroke" Value="{x:Static Brushes.Blue}"/>
						</Trigger>
						<Trigger Property="elements:Edge.IsTrasnformer" Value="True">
							<Setter TargetName="Transformer" Property="Visibility" Value="Visible"/>
						</Trigger>

						<Trigger Property="elements:Vertex.IsDraggingLabel" Value="True">
							<Setter TargetName="Polyline" Property="StrokeDashArray" Value="2 2"/>
							<Setter TargetName="Transformer" Property="StrokeDashArray" Value="2 2"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>
